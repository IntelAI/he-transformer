//*****************************************************************************
// Copyright 2018-2019 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//*****************************************************************************

#include <random>

#include "ENCRYPTO_utils/crypto/crypto.h"
#include "ENCRYPTO_utils/parse_options.h"
#include "aby/aby_util.hpp"
#include "aby/kernel/bounded_relu_aby.hpp"
#include "aby/kernel/relu_aby.hpp"
#include "abycore/aby/abyparty.h"
#include "abycore/circuit/booleancircuits.h"
#include "abycore/circuit/share.h"
#include "abycore/sharing/sharing.h"
#include "gtest/gtest.h"

namespace ngraph::runtime::aby {

TEST(aby, trivial) {
  int a = 1;
  int b = 2;
  EXPECT_EQ(3, a + b);
}

TEST(aby, create_party) {
  auto a = new ABYParty(CLIENT, "localhost", 30001, get_sec_lvl(128), 32, 2,
                        MT_OT, 100000);
  delete a;
  EXPECT_EQ(1, 1);
}

TEST(aby, create_unique_ptr_party) {
  auto a = std::make_unique<ABYParty>(CLIENT, "localhost", 30001,
                                      get_sec_lvl(128), 32, 2, MT_OT, 100000);
  EXPECT_EQ(1, 1);
}

auto test_relu_circuit = [](size_t num_vals, size_t coeff_modulus) {
  e_sharing sharing = S_BOOL;
  uint32_t bitlen = 64;

  NGRAPH_INFO << "coeff_modulus " << coeff_modulus;
  NGRAPH_INFO << "num_vals " << num_vals;
  std::vector<uint64_t> zeros(num_vals, 0);

  std::vector<uint64_t> x(num_vals);
  std::vector<uint64_t> xs(num_vals);
  std::vector<uint64_t> xc(num_vals);
  std::vector<uint64_t> r(num_vals);
  std::vector<bool> bigger_than_zero(num_vals);
  std::vector<uint64_t> exp_output(num_vals);

  std::random_device rd;
  std::mt19937 gen(0);  // rd());
  std::uniform_int_distribution<uint64_t> dis(0, coeff_modulus - 1);
  for (int i = 0; i < static_cast<int>(num_vals); ++i) {
    x[i] = i;
    r[i] = dis(gen);
    xc[i] = dis(gen);
    xs[i] = (x[i] % coeff_modulus + coeff_modulus) - xc[i];
    xs[i] = xs[i] % coeff_modulus;
    // Relu circuit expects transformation (-q/2, q/2) => (0,q) by adding q to
    // values < 0
    bigger_than_zero[i] = (x[i] % coeff_modulus) <= (coeff_modulus / 2);
    exp_output[i] = bigger_than_zero[i] ? (x[i] + r[i]) % coeff_modulus : r[i];

    EXPECT_EQ((xs[i] + xc[i]) % coeff_modulus, x[i] % coeff_modulus);
  }

  // Server function
  auto server_fun = [&]() {
    NGRAPH_INFO << "server function";
    auto server = std::make_unique<ABYParty>(
        SERVER, "0.0.0.0", 30001, get_sec_lvl(128), 64, 1, MT_OT, 100000);

    std::vector<Sharing*>& sharings = server->GetSharings();
    BooleanCircuit& circ = dynamic_cast<BooleanCircuit&>(
        *sharings[sharing]->GetCircuitBuildRoutine());

    std::this_thread::sleep_for(std::chrono::seconds(1));

    relu_aby(circ, num_vals, xs, zeros, r, bitlen, coeff_modulus);
    server->ExecCircuit();
    server->Reset();
  };

  // Client function
  auto client_fun = [&]() {
    std::this_thread::sleep_for(std::chrono::seconds(1));
    NGRAPH_INFO << "client function";
    auto client = std::make_unique<ABYParty>(
        CLIENT, "localhost", 30001, get_sec_lvl(128), 64, 1, MT_OT, 100000);

    std::vector<Sharing*>& sharings = client->GetSharings();
    BooleanCircuit& circ = dynamic_cast<BooleanCircuit&>(
        *sharings[sharing]->GetCircuitBuildRoutine());

    share* relu_out =
        relu_aby(circ, num_vals, zeros, xc, zeros, bitlen, coeff_modulus);

    client->ExecCircuit();

    uint32_t out_bitlen_relu, out_num_aby_vals;
    uint64_t* out_vals_relu;

    relu_out->get_clear_value_vec(&out_vals_relu, &out_bitlen_relu,
                                  &out_num_aby_vals);

    for (size_t i = 0; i < out_num_aby_vals; ++i) {
      if (out_vals_relu[i] != exp_output[i]) {
        NGRAPH_INFO << "Not same at index " << i;
        NGRAPH_INFO << "\tx[i] " << x[i];
        NGRAPH_INFO << "\txs[i] " << xs[i];
        NGRAPH_INFO << "\txc[i] " << xc[i];
        NGRAPH_INFO << "\tr[i] " << r[i];
        NGRAPH_INFO << "\tbigger_than_zero[i] " << bigger_than_zero[i];
        NGRAPH_INFO << "\texp_output[i] " << exp_output[i];
        NGRAPH_INFO << "\toutput " << out_vals_relu[i];
      }
      EXPECT_EQ(out_vals_relu[i], exp_output[i]);
    }

    client->Reset();
  };
  std::thread server_thread(server_fun);
  client_fun();
  server_thread.join();
};

TEST(aby, relu_circuit_10_q8) { test_relu_circuit(10, 8); }

TEST(aby, relu_circuit_100_q8) { test_relu_circuit(100, 8); }

TEST(aby, relu_circuit_10_q9) { test_relu_circuit(10, 9); }

TEST(aby, relu_circuit_100_q9) { test_relu_circuit(100, 9); }

TEST(aby, relu_circuit_100_q_large) {
  test_relu_circuit(100, 18014398509404161);
}

auto test_bounded_relu_circuit = [](size_t num_vals, size_t coeff_modulus) {
  e_sharing sharing = S_BOOL;
  uint32_t bitlen = 64;

  NGRAPH_INFO << "coeff_modulus " << coeff_modulus;
  NGRAPH_INFO << "num_vals " << num_vals;
  std::vector<uint64_t> zeros(num_vals, 0);

  std::vector<uint64_t> x(num_vals);
  std::vector<uint64_t> xs(num_vals);
  std::vector<uint64_t> xc(num_vals);
  std::vector<uint64_t> bounds(num_vals);
  std::vector<uint64_t> r(num_vals);
  std::vector<uint64_t> exp_output(num_vals);

  std::random_device rd;
  std::mt19937 gen(0);  // rd());
  std::uniform_int_distribution<uint64_t> dis(0, coeff_modulus - 1);
  for (int i = 0; i < static_cast<int>(num_vals); ++i) {
    x[i] = i;
    r[i] = dis(gen);
    xc[i] = dis(gen);
    xs[i] = (x[i] % coeff_modulus + coeff_modulus) - xc[i];
    xs[i] = xs[i] % coeff_modulus;

    bounds[i] = i % (coeff_modulus / 2);
    // Relu circuit expects transformation (-q/2, q/2) => (0,q) by adding q to
    // values < 0

    // x > q/2         => brelu(x) = 0
    // q/2 > x > bound => brelu(x) = bound
    // bound > x       => brelu(x) = x

    uint64_t x_mod = x[i] % coeff_modulus;

    if (x_mod > coeff_modulus / 2) {
      exp_output[i] = 0;
    } else if (x_mod > bounds[i]) {
      exp_output[i] = bounds[i];
    } else {
      exp_output[i] = x_mod;
    }

    // Mask output value
    exp_output[i] = (exp_output[i] + r[i]) % coeff_modulus;
  }

  // Server function
  auto server_fun = [&]() {
    NGRAPH_INFO << "server function";
    auto server = std::make_unique<ABYParty>(
        SERVER, "0.0.0.0", 30001, get_sec_lvl(128), 64, 1, MT_OT, 100000);

    std::vector<Sharing*>& sharings = server->GetSharings();
    BooleanCircuit& circ = dynamic_cast<BooleanCircuit&>(
        *sharings[sharing]->GetCircuitBuildRoutine());

    std::this_thread::sleep_for(std::chrono::seconds(1));

    bounded_relu_aby(circ, num_vals, xs, zeros, r, bounds, bitlen,
                     coeff_modulus);
    server->ExecCircuit();
    server->Reset();
  };

  // Client function
  auto client_fun = [&]() {
    std::this_thread::sleep_for(std::chrono::seconds(1));
    NGRAPH_INFO << "client function";
    auto client = std::make_unique<ABYParty>(
        CLIENT, "localhost", 30001, get_sec_lvl(128), 64, 1, MT_OT, 100000);

    std::vector<Sharing*>& sharings = client->GetSharings();
    BooleanCircuit& circ = dynamic_cast<BooleanCircuit&>(
        *sharings[sharing]->GetCircuitBuildRoutine());

    share* relu_out = bounded_relu_aby(circ, num_vals, zeros, xc, zeros, zeros,
                                       bitlen, coeff_modulus);

    client->ExecCircuit();

    uint32_t out_bitlen_relu, out_num_aby_vals;
    uint64_t* out_vals_relu;

    relu_out->get_clear_value_vec(&out_vals_relu, &out_bitlen_relu,
                                  &out_num_aby_vals);

    for (size_t i = 0; i < out_num_aby_vals; ++i) {
      if (out_vals_relu[i] != exp_output[i]) {
        NGRAPH_INFO << "Not same at index " << i;
        NGRAPH_INFO << "\tx[i] " << x[i];
        NGRAPH_INFO << "\txs[i] " << xs[i];
        NGRAPH_INFO << "\txc[i] " << xc[i];
        NGRAPH_INFO << "\tr[i] " << r[i];
        NGRAPH_INFO << "\texp_output[i] " << exp_output[i];
        NGRAPH_INFO << "\toutput " << out_vals_relu[i];
      }
      EXPECT_EQ(out_vals_relu[i], exp_output[i]);
    }

    client->Reset();
  };
  std::thread server_thread(server_fun);
  client_fun();
  server_thread.join();
};

TEST(aby, bounded_relu_circuit_10_q8) { test_bounded_relu_circuit(10, 8); }

TEST(aby, bounded_relu_circuit_100_q8) { test_bounded_relu_circuit(100, 8); }

TEST(aby, bounded_relu_circuit_10_q9) { test_bounded_relu_circuit(10, 9); }

TEST(aby, bounded_relu_circuit_100_q9) { test_bounded_relu_circuit(100, 9); }

TEST(aby, bounded_relu_circuit_100_q_large) {
  test_bounded_relu_circuit(100, 18014398509404161);
}

TEST(aby, mod_reduce_zero_centered) {
  // Already in range
  EXPECT_DOUBLE_EQ(mod_reduce_zero_centered(0.1, 2.0), 0.1);

  // Below range
  EXPECT_DOUBLE_EQ(mod_reduce_zero_centered(-1.1, 2.0), 0.9);

  // Far below range
  EXPECT_DOUBLE_EQ(mod_reduce_zero_centered(-9.1, 2.0), 0.9);

  // Above range
  EXPECT_DOUBLE_EQ(mod_reduce_zero_centered(1.1, 2.0), -0.9);

  // Far above range
  EXPECT_DOUBLE_EQ(mod_reduce_zero_centered(9.1, 2.0), -0.9);
}

TEST(aby, split_vector) {
  {
    auto splits = split_vector(10, 3);
    EXPECT_EQ(splits.size(), 3);
    EXPECT_EQ(splits[0].first, 0);
    EXPECT_EQ(splits[0].second, 4);
    EXPECT_EQ(splits[1].first, 4);
    EXPECT_EQ(splits[1].second, 7);
    EXPECT_EQ(splits[2].first, 7);
    EXPECT_EQ(splits[2].second, 10);
  }
  {
    auto splits = split_vector(10, 4);
    EXPECT_EQ(splits.size(), 4);
    EXPECT_EQ(splits[0].first, 0);
    EXPECT_EQ(splits[0].second, 3);
    EXPECT_EQ(splits[1].first, 3);
    EXPECT_EQ(splits[1].second, 6);
    EXPECT_EQ(splits[2].first, 6);
    EXPECT_EQ(splits[2].second, 8);
    EXPECT_EQ(splits[3].first, 8);
    EXPECT_EQ(splits[3].second, 10);
  }
}

}  // namespace ngraph::runtime::aby

TEST(aby, relu_circuit_debug) {
  e_sharing sharing = S_BOOL;
  uint32_t bitlen = 64;
  size_t num_vals = 1;

  size_t coeff_modulus = 1099511592961;

  NGRAPH_INFO << "coeff_modulus " << coeff_modulus;
  NGRAPH_INFO << "num_vals " << num_vals;
  std::vector<uint64_t> zeros(num_vals, 0);

  std::vector<uint64_t> xs{0};
  std::vector<uint64_t> xc{29830620};
  std::vector<uint64_t> r{566342962776};

  // Server function
  auto server_fun = [&]() {
    NGRAPH_INFO << "server function";
    auto server = std::make_unique<ABYParty>(
        SERVER, "0.0.0.0", 30001, get_sec_lvl(128), 64, 1, MT_OT, 100);

    std::vector<Sharing*>& sharings = server->GetSharings();
    BooleanCircuit& circ = dynamic_cast<BooleanCircuit&>(
        *sharings[sharing]->GetCircuitBuildRoutine());

    std::this_thread::sleep_for(std::chrono::seconds(1));

    ngraph::runtime::aby::relu_aby(circ, num_vals, xs, zeros, r, bitlen,
                                   coeff_modulus);
    server->ExecCircuit();
    server->Reset();
  };

  // Client function
  auto client_fun = [&]() {
    std::this_thread::sleep_for(std::chrono::seconds(1));
    NGRAPH_INFO << "client function";
    auto client = std::make_unique<ABYParty>(
        CLIENT, "localhost", 30001, get_sec_lvl(128), 64, 1, MT_OT, 100000);

    std::vector<Sharing*>& sharings = client->GetSharings();
    BooleanCircuit& circ = dynamic_cast<BooleanCircuit&>(
        *sharings[sharing]->GetCircuitBuildRoutine());

    share* relu_out = ngraph::runtime::aby::relu_aby(
        circ, num_vals, zeros, xc, zeros, bitlen, coeff_modulus);

    client->ExecCircuit();

    uint32_t out_bitlen_relu, out_num_aby_vals;
    uint64_t* out_vals_relu;

    relu_out->get_clear_value_vec(&out_vals_relu, &out_bitlen_relu,
                                  &out_num_aby_vals);

    for (size_t i = 0; i < out_num_aby_vals; ++i) {
      NGRAPH_INFO << "out_vals_relu[" << i << "[ = " << out_vals_relu[i];
    }

    client->Reset();
  };
  std::thread server_thread(server_fun);
  client_fun();
  server_thread.join();
}

TEST(aby, relu_circuit_debug_400) {
  e_sharing sharing = S_BOOL;
  uint32_t bitlen = 64;
  size_t num_vals = 400;

  size_t coeff_modulus = 1099511592961;

  NGRAPH_INFO << "coeff_modulus " << coeff_modulus;
  NGRAPH_INFO << "num_vals " << num_vals;
  std::vector<uint64_t> zeros(num_vals, 0);

  std::vector<uint64_t> xs(num_vals, 0);
  std::vector<uint64_t> xc{
      26249340717,   1082557063053, 1088092409327, 52588545315,
      23598220947,   1086178503016, 1069306892608, 34583375118,
      28064324190,   1085224137988, 1098615949210, 1092228633962,
      26086962122,   1083549690341, 8605758044,    22388902316,
      29104095369,   1080760988798, 1071707877304, 25964880413,
      1093190087897, 1927619926,    1082411156223, 8242705794,
      1070069931990, 1768175268,    10357795185,   1096052723781,
      1094787396538, 1088076849813, 62932866863,   8461541440,
      7374718618,    25707104982,   1077928406965, 3608106494,
      1061689214947, 6799024803,    1080567097574, 1093737578811,
      7653763843,    17013703210,   1070660672818, 1037806312296,
      1069008955591, 1082264638492, 10535649244,   10636181334,
      1088053374217, 1099038400904, 1093378347253, 1065593613588,
      1056495092504, 10741896853,   1059546438232, 1333669692,
      1070080372649, 20079196001,   2299417868,    1075601699985,
      10005253295,   7204313241,    1064286698470, 1065719887551,
      1069793636843, 1091762690583, 4523706757,    23539533495,
      1082352538471, 1062862258796, 14496578735,   1934826195,
      1097965116935, 1084033916149, 1060305000410, 1059558020742,
      1068472203611, 3456125509,    1098762764576, 1095037632574,
      28448859434,   860020549,     19955252890,   1061566604338,
      1068444782787, 23927397941,   33182555566,   1059558742343,
      46085398301,   28923367208,   2968974604,    11336790985,
      1098068799749, 38428469255,   1053543262065, 44461768149,
      1071806302,    1051596887825, 45145365860,   1078078018149,
      1098620450758, 47177117,      1099242029443, 1098670054524,
      1099038634348, 61083556,      800657172,     1098764255696,
      1099181516881, 362311174,     1098936868733, 1099186414303,
      1099485784337, 726433460,     163964752,     1099035928505,
      1098744939618, 1099230659749, 1098454023217, 1099235181028,
      1099399880345, 1099136192718, 729803920,     1098453434802,
      1098594200997, 185910438,     1099131942199, 244039249,
      57097023,      1099441108637, 1099480093800, 1098894199611,
      1099259326494, 1099502375662, 1098799192212, 1098657103061,
      1099298423024, 1099015979137, 1099077910525, 1099010210624,
      1098967013946, 1099150128566, 321863196,     577837476,
      1099243289522, 14998690,      1099364580443, 701322475,
      847183629,     1099048261861, 225301095,     1099411425075,
      46218072,      33390544,      1098916758664, 255188024,
      1099503700368, 69896935,      966296615,     361737878,
      277616533,     1099244250476, 1099277972782, 1098966974099,
      1097904516959, 897109566,     1099365324802, 1099193907316,
      1099065894247, 1099129879224, 1098961600147, 306764773,
      1099136551180, 1099063970352, 90380353,      1098713199568,
      420394292,     218969568,     126907582,     665887937,
      618999014,     1099145850020, 1099504012252, 1098834603815,
      290371389,     1098794189118, 1099144466109, 1099161983278,
      1099209500879, 1097911105921, 1099039698234, 160706787,
      858522125,     1099260902657, 1099297116500, 33742069,
      1098795942510, 1099303292787, 1099270178227, 1099218883994,
      1099460332253, 1099223101424, 1099297452556, 1099403235582,
      167755654,     547809498,     8039427,       322459363,
      181636697,     20284624,      1098730881346, 1099275220463,
      350209469,     299474069,     1099372485442, 34801812,
      1099467706073, 1099324030221, 182484885,     1098943212464,
      1099232228961, 1099305297225, 1099217803291, 1099282551702,
      189724146,     1099332281223, 1099234631243, 225677511,
      85563289,      1099041979022, 155455867,     1098840242217,
      372612625,     453741128,     1099373787209, 101824296,
      1099050293861, 1099453732664, 343738285,     1099347178538,
      1099151466512, 44010228,      1099149504757, 1099282030056,
      1099158111946, 1099440484876, 1099359807158, 260755460,
      1099232556161, 1099070256587, 1099503036935, 1099315244955,
      1099441776721, 1099164607985, 1099439407760, 245714917,
      352978220,     1099437097808, 427513724,     53220858,
      1099446777012, 1099483548063, 19793334,      93677685,
      1099013474803, 92237638,      1099291496676, 1099363663483,
      1099283773070, 1099391165099, 1099298129345, 183575374,
      1099448684423, 1099163757298, 1099253082413, 1098863208772,
      1099241689560, 466983018,     1099366680077, 126445514,
      62939276,      266502929,     1099292236599, 183720716,
      21733821,      256135125,     148873103,     19503595,
      3489294,       1099315024483, 140911969,     1099405790204,
      262610312,     176151532,     1099425233118, 140093121,
      1099255801852, 1099220762372, 415477299,     1099273662605,
      171881811,     1098961231724, 1099393088161, 1098942695223,
      1099397026519, 1099282671002, 190386121,     105042358,
      13578776,      568967054,     1099113125008, 1098867570279,
      137492406,     1099272009247, 1099145362504, 1098675274982,
      1099381179764, 1099038545749, 1099313514545, 1098698947570,
      1099474473013, 1098258065784, 1098987822458, 175560075,
      54170237,      1098919418989, 1099038950048, 436539242,
      1098759228387, 316193340,     1098667246662, 79878289,
      1099361363205, 1098959694543, 1098908619452, 1099282848039,
      1099094491420, 211723,        182982875,     1099126508060,
      136985335,     1099123127928, 1099013627849, 1099429241080,
      616879120,     164153560,     394085562,     255987092,
      899703267,     1098735178918, 390854503,     870358772,
      1099347276874, 1098733668644, 1099431514684, 1099249521031,
      319654480,     1099207261701, 1099372951689, 10294993,
      64091570,      1099346353700, 972462316,     1099258607696,
      1099110176048, 1098857620339, 1098797530173, 1099043045823,
      1099383181679, 376852478,     231198006,     629424555,
      324180948,     17432651,      155780792,     1099285196604,
      1099123792128, 1099270071162, 1099186055136, 108811006,
      39735310,      1099043737475, 9843871,       1099055423991,
      1099409629986, 1098950661530, 172012274,     359177490,
      1098972046316, 1098971200562, 1099018558616, 751986285,
      29830253,      1099310724893, 26663571,      1099341027347,
      455343044,     1098792100422, 1099112301452, 1099154295579};
  std::vector<uint64_t> r{
      16717763478,   428743023310,  241203051223,  159171529165,  179518703900,
      733114765257,  951310003195,  403748295410,  274160048649,  855448283369,
      166881687274,  779282046854,  65718622402,   226887416248,  770351354525,
      179385032575,  556100552371,  296658993351,  909357433375,  71868081237,
      155651014134,  343660358145,  949314965337,  513048340664,  841602589548,
      700654620783,  865645490616,  287496253909,  928275651446,  28603280623,
      920474272704,  611181345870,  989112803485,  45402259734,   934167692478,
      347274116831,  521044734072,  539960736455,  121533258688,  176412379949,
      471331743751,  299802612871,  1047990430021, 97688953131,   901779735324,
      221394204489,  878060614811,  667151382932,  84692552424,   206831932670,
      89222039877,   692706376594,  982105707710,  1016182037364, 947095663171,
      426572361647,  900287848207,  157980161180,  85581286732,   827715126241,
      243001401177,  765595275307,  364428382578,  101496784872,  347934162707,
      260627115454,  49392962770,   622255858874,  140784995494,  398804635356,
      374598934341,  642143592948,  964535709683,  695769580709,  726661846902,
      1035320095622, 411934615263,  452166521082,  178823328873,  445391525141,
      595107272848,  296149070017,  1077701925984, 250391413460,  727909651003,
      791540999150,  159687473287,  144328636539,  223346016951,  440517877495,
      634176304428,  1029077489557, 475427486029,  70699713109,   66690152200,
      832210732364,  545894027746,  263743630119,  44843257751,   982393729269,
      94500109228,   824758131649,  759869528823,  576237949385,  1072969474572,
      345970414021,  235379092512,  763738257161,  680971549756,  885101134782,
      346938550478,  229311466751,  237009805239,  281280347868,  955476756093,
      1005484215770, 837396507852,  319896379541,  211374857424,  755167613103,
      653316595181,  1010288205864, 617256921760,  659820156699,  214699945168,
      55859424522,   530698058918,  1072811558209, 442391069647,  957528834281,
      260474667247,  1020151839119, 1096308485764, 39076097773,   1066925156239,
      273491502848,  539905752250,  863041085660,  247543575288,  471787661150,
      495739977206,  131439139696,  266734268652,  970472315626,  771109472918,
      524480091288,  952143123139,  740523673653,  788873882768,  338486485268,
      245436154694,  1075759586789, 841667500600,  722572109559,  164627564676,
      122418370773,  410598099935,  383308406428,  143379300071,  381538459468,
      958605626738,  673252298315,  105143149347,  124460261502,  1061549135064,
      574926478160,  1007940563446, 47859509316,   210602149718,  208571993739,
      485179006923,  74897575973,   95298870620,   167108093953,  714377574547,
      761914996397,  119970830802,  25252765143,   513221792158,  285127058618,
      712692167215,  77505316596,   249624728959,  336068645683,  350174453771,
      639630057978,  29011570656,   290964611147,  537089894754,  927719572835,
      1045383821139, 885481115946,  207027039670,  66096322650,   250945772921,
      312019760068,  945989445120,  787856158199,  242114387901,  665715377927,
      408421945010,  1051985645842, 137160694193,  265744368176,  611356259364,
      920644910921,  34875920797,   917683701026,  561122166963,  308972109564,
      903914568135,  210970181105,  594288492738,  210729566212,  440057238166,
      486859033597,  632923387537,  159988946118,  628317760165,  886294588926,
      802961117540,  230578884202,  540428043537,  471465541024,  461615521439,
      581798461835,  658244456119,  197089200674,  948466358474,  1048000113271,
      961593786762,  61877294310,   609103074077,  634900215114,  581219006687,
      624966854033,  413826302996,  504539176612,  992197944316,  544226172176,
      1082468339416, 1033397819358, 1023756556684, 932052739930,  1005857504912,
      283510096225,  771348747878,  144367850733,  121002480493,  103902761760,
      419451029320,  708473276585,  523857205271,  1020705781032, 385482410057,
      753061534442,  709462557202,  1044288323236, 37061658966,   252697977988,
      756587456909,  897875367010,  192937123541,  189249897995,  642718222069,
      151882783357,  820653712660,  1091249993359, 448051943411,  1052312997780,
      111391828202,  639423158972,  832990235352,  191328391115,  702433571250,
      562371344193,  881991628846,  191669982255,  62493973081,   999222950263,
      862817358966,  285173194669,  798810986556,  828861691273,  728915915825,
      130338718806,  1035471840771, 1084657307574, 672514650011,  1083674743249,
      770975871239,  946787317323,  175401414421,  263941418358,  2921782672,
      1044478032771, 850149580485,  601137692629,  615760376478,  92064331321,
      497142651303,  1062022467560, 1095863327472, 68919098748,   346760894816,
      891100235032,  538058563154,  1682061157,    475119703319,  266330942983,
      336102161677,  691019148852,  29894265161,   612644404891,  372090896005,
      825909684897,  189006096489,  555003795406,  710464678040,  1010965167136,
      781276277348,  708589222615,  1001307633404, 311940615278,  487244728723,
      185756389395,  107208375236,  366238147948,  1080662218329, 625302377637,
      338105994431,  397676162328,  541925832119,  742722590928,  281627156431,
      131739970607,  723370968539,  345590655439,  91419942851,   254372290073,
      519191323341,  15527864119,   878005554243,  750197525309,  937722491581,
      532888578365,  868960619690,  753359761104,  747010878497,  1076220094916,
      958875161015,  94774637393,   340730569669,  283329920768,  642020836084,
      151709951513,  110952319271,  902161539315,  375179612519,  206541833551,
      721751448228,  385186232267,  756510970461,  227446333033,  1087438029932,
      630731291486,  1091830532036, 1007480323812, 44698026046,   281790158807,
      919868875429,  541385120569,  952509273933,  333725039363,  428036448522,
      334036092184,  883453374503,  369226500939,  1032899375205, 1014028344681,
      294274638355,  1084477239049, 364083942965,  417514232972,  614346448735,
      180307700216,  707902763179,  469029232964,  1068109342799, 142458069324,
      500015439780,  516989599924,  566342962776,  171215755857,  801469165613,
      708407922670,  1089878926303, 1021271720516, 662396656991,  920559436609};

  zeros = std::vector<uint64_t>{zeros.begin(), zeros.begin() + num_vals};
  xs = std::vector<uint64_t>{xs.begin(), xs.begin() + num_vals};
  xc = std::vector<uint64_t>{xc.begin(), xc.begin() + num_vals};
  r = std::vector<uint64_t>{r.begin(), r.begin() + num_vals};

  // Server function
  auto server_fun = [&]() {
    NGRAPH_INFO << "server function";
    auto server = std::make_unique<ABYParty>(
        SERVER, "0.0.0.0", 30001, get_sec_lvl(128), 64, 1, MT_OT, 100);

    std::vector<Sharing*>& sharings = server->GetSharings();
    BooleanCircuit& circ = dynamic_cast<BooleanCircuit&>(
        *sharings[sharing]->GetCircuitBuildRoutine());

    std::this_thread::sleep_for(std::chrono::seconds(1));

    ngraph::runtime::aby::relu_aby(circ, num_vals, xs, zeros, r, bitlen,
                                   coeff_modulus);
    server->ExecCircuit();
    server->Reset();
  };

  // Client function
  auto client_fun = [&]() {
    std::this_thread::sleep_for(std::chrono::seconds(1));
    NGRAPH_INFO << "client function";
    auto client = std::make_unique<ABYParty>(
        CLIENT, "localhost", 30001, get_sec_lvl(128), 64, 1, MT_OT, 100000);

    std::vector<Sharing*>& sharings = client->GetSharings();
    BooleanCircuit& circ = dynamic_cast<BooleanCircuit&>(
        *sharings[sharing]->GetCircuitBuildRoutine());

    share* relu_out = ngraph::runtime::aby::relu_aby(
        circ, num_vals, zeros, xc, zeros, bitlen, coeff_modulus);

    client->ExecCircuit();

    uint32_t out_bitlen_relu, out_num_aby_vals;
    uint64_t* out_vals_relu;

    relu_out->get_clear_value_vec(&out_vals_relu, &out_bitlen_relu,
                                  &out_num_aby_vals);

    for (size_t i = 0; i < out_num_aby_vals; ++i) {
      NGRAPH_INFO << "out_vals_relu[" << i << "[ = " << out_vals_relu[i];
    }

    client->Reset();
  };
  std::thread server_thread(server_fun);
  client_fun();
  server_thread.join();
}

TEST(aby, relu_circuit_debug_100) {
  e_sharing sharing = S_BOOL;
  uint32_t bitlen = 64;
  size_t num_vals = 100;

  size_t coeff_modulus = 1099511592961;

  NGRAPH_INFO << "coeff_modulus " << coeff_modulus;
  NGRAPH_INFO << "num_vals " << num_vals;
  std::vector<uint64_t> zeros(num_vals, 0);

  std::vector<uint64_t> xs(num_vals, 0);
  std::vector<uint64_t> xc{
      26249340717,   1082557063053, 1088092409327, 52588545315,
      23598220947,   1086178503016, 1069306892608, 34583375118,
      28064324190,   1085224137988, 1098615949210, 1092228633962,
      26086962122,   1083549690341, 8605758044,    22388902316,
      29104095369,   1080760988798, 1071707877304, 25964880413,
      1093190087897, 1927619926,    1082411156223, 8242705794,
      1070069931990, 1768175268,    10357795185,   1096052723781,
      1094787396538, 1088076849813, 62932866863,   8461541440,
      7374718618,    25707104982,   1077928406965, 3608106494,
      1061689214947, 6799024803,    1080567097574, 1093737578811,
      7653763843,    17013703210,   1070660672818, 1037806312296,
      1069008955591, 1082264638492, 10535649244,   10636181334,
      1088053374217, 1099038400904, 1093378347253, 1065593613588,
      1056495092504, 10741896853,   1059546438232, 1333669692,
      1070080372649, 20079196001,   2299417868,    1075601699985,
      10005253295,   7204313241,    1064286698470, 1065719887551,
      1069793636843, 1091762690583, 4523706757,    23539533495,
      1082352538471, 1062862258796, 14496578735,   1934826195,
      1097965116935, 1084033916149, 1060305000410, 1059558020742,
      1068472203611, 3456125509,    1098762764576, 1095037632574,
      28448859434,   860020549,     19955252890,   1061566604338,
      1068444782787, 23927397941,   33182555566,   1059558742343,
      46085398301,   28923367208,   2968974604,    11336790985,
      1098068799749, 38428469255,   1053543262065, 44461768149,
      1071806302,    1051596887825, 45145365860,   1078078018149,
      1098620450758, 47177117,      1099242029443, 1098670054524,
      1099038634348, 61083556,      800657172,     1098764255696,
      1099181516881, 362311174,     1098936868733, 1099186414303,
      1099485784337, 726433460,     163964752,     1099035928505,
      1098744939618, 1099230659749, 1098454023217, 1099235181028,
      1099399880345, 1099136192718, 729803920,     1098453434802,
      1098594200997, 185910438,     1099131942199, 244039249,
      57097023,      1099441108637, 1099480093800, 1098894199611,
      1099259326494, 1099502375662, 1098799192212, 1098657103061,
      1099298423024, 1099015979137, 1099077910525, 1099010210624,
      1098967013946, 1099150128566, 321863196,     577837476,
      1099243289522, 14998690,      1099364580443, 701322475,
      847183629,     1099048261861, 225301095,     1099411425075,
      46218072,      33390544,      1098916758664, 255188024,
      1099503700368, 69896935,      966296615,     361737878,
      277616533,     1099244250476, 1099277972782, 1098966974099,
      1097904516959, 897109566,     1099365324802, 1099193907316,
      1099065894247, 1099129879224, 1098961600147, 306764773,
      1099136551180, 1099063970352, 90380353,      1098713199568,
      420394292,     218969568,     126907582,     665887937,
      618999014,     1099145850020, 1099504012252, 1098834603815,
      290371389,     1098794189118, 1099144466109, 1099161983278,
      1099209500879, 1097911105921, 1099039698234, 160706787,
      858522125,     1099260902657, 1099297116500, 33742069,
      1098795942510, 1099303292787, 1099270178227, 1099218883994,
      1099460332253, 1099223101424, 1099297452556, 1099403235582,
      167755654,     547809498,     8039427,       322459363,
      181636697,     20284624,      1098730881346, 1099275220463,
      350209469,     299474069,     1099372485442, 34801812,
      1099467706073, 1099324030221, 182484885,     1098943212464,
      1099232228961, 1099305297225, 1099217803291, 1099282551702,
      189724146,     1099332281223, 1099234631243, 225677511,
      85563289,      1099041979022, 155455867,     1098840242217,
      372612625,     453741128,     1099373787209, 101824296,
      1099050293861, 1099453732664, 343738285,     1099347178538,
      1099151466512, 44010228,      1099149504757, 1099282030056,
      1099158111946, 1099440484876, 1099359807158, 260755460,
      1099232556161, 1099070256587, 1099503036935, 1099315244955,
      1099441776721, 1099164607985, 1099439407760, 245714917,
      352978220,     1099437097808, 427513724,     53220858,
      1099446777012, 1099483548063, 19793334,      93677685,
      1099013474803, 92237638,      1099291496676, 1099363663483,
      1099283773070, 1099391165099, 1099298129345, 183575374,
      1099448684423, 1099163757298, 1099253082413, 1098863208772,
      1099241689560, 466983018,     1099366680077, 126445514,
      62939276,      266502929,     1099292236599, 183720716,
      21733821,      256135125,     148873103,     19503595,
      3489294,       1099315024483, 140911969,     1099405790204,
      262610312,     176151532,     1099425233118, 140093121,
      1099255801852, 1099220762372, 415477299,     1099273662605,
      171881811,     1098961231724, 1099393088161, 1098942695223,
      1099397026519, 1099282671002, 190386121,     105042358,
      13578776,      568967054,     1099113125008, 1098867570279,
      137492406,     1099272009247, 1099145362504, 1098675274982,
      1099381179764, 1099038545749, 1099313514545, 1098698947570,
      1099474473013, 1098258065784, 1098987822458, 175560075,
      54170237,      1098919418989, 1099038950048, 436539242,
      1098759228387, 316193340,     1098667246662, 79878289,
      1099361363205, 1098959694543, 1098908619452, 1099282848039,
      1099094491420, 211723,        182982875,     1099126508060,
      136985335,     1099123127928, 1099013627849, 1099429241080,
      616879120,     164153560,     394085562,     255987092,
      899703267,     1098735178918, 390854503,     870358772,
      1099347276874, 1098733668644, 1099431514684, 1099249521031,
      319654480,     1099207261701, 1099372951689, 10294993,
      64091570,      1099346353700, 972462316,     1099258607696,
      1099110176048, 1098857620339, 1098797530173, 1099043045823,
      1099383181679, 376852478,     231198006,     629424555,
      324180948,     17432651,      155780792,     1099285196604,
      1099123792128, 1099270071162, 1099186055136, 108811006,
      39735310,      1099043737475, 9843871,       1099055423991,
      1099409629986, 1098950661530, 172012274,     359177490,
      1098972046316, 1098971200562, 1099018558616, 751986285,
      29830253,      1099310724893, 26663571,      1099341027347,
      455343044,     1098792100422, 1099112301452, 1099154295579};
  std::vector<uint64_t> r{
      16717763478,   428743023310,  241203051223,  159171529165,  179518703900,
      733114765257,  951310003195,  403748295410,  274160048649,  855448283369,
      166881687274,  779282046854,  65718622402,   226887416248,  770351354525,
      179385032575,  556100552371,  296658993351,  909357433375,  71868081237,
      155651014134,  343660358145,  949314965337,  513048340664,  841602589548,
      700654620783,  865645490616,  287496253909,  928275651446,  28603280623,
      920474272704,  611181345870,  989112803485,  45402259734,   934167692478,
      347274116831,  521044734072,  539960736455,  121533258688,  176412379949,
      471331743751,  299802612871,  1047990430021, 97688953131,   901779735324,
      221394204489,  878060614811,  667151382932,  84692552424,   206831932670,
      89222039877,   692706376594,  982105707710,  1016182037364, 947095663171,
      426572361647,  900287848207,  157980161180,  85581286732,   827715126241,
      243001401177,  765595275307,  364428382578,  101496784872,  347934162707,
      260627115454,  49392962770,   622255858874,  140784995494,  398804635356,
      374598934341,  642143592948,  964535709683,  695769580709,  726661846902,
      1035320095622, 411934615263,  452166521082,  178823328873,  445391525141,
      595107272848,  296149070017,  1077701925984, 250391413460,  727909651003,
      791540999150,  159687473287,  144328636539,  223346016951,  440517877495,
      634176304428,  1029077489557, 475427486029,  70699713109,   66690152200,
      832210732364,  545894027746,  263743630119,  44843257751,   982393729269,
      94500109228,   824758131649,  759869528823,  576237949385,  1072969474572,
      345970414021,  235379092512,  763738257161,  680971549756,  885101134782,
      346938550478,  229311466751,  237009805239,  281280347868,  955476756093,
      1005484215770, 837396507852,  319896379541,  211374857424,  755167613103,
      653316595181,  1010288205864, 617256921760,  659820156699,  214699945168,
      55859424522,   530698058918,  1072811558209, 442391069647,  957528834281,
      260474667247,  1020151839119, 1096308485764, 39076097773,   1066925156239,
      273491502848,  539905752250,  863041085660,  247543575288,  471787661150,
      495739977206,  131439139696,  266734268652,  970472315626,  771109472918,
      524480091288,  952143123139,  740523673653,  788873882768,  338486485268,
      245436154694,  1075759586789, 841667500600,  722572109559,  164627564676,
      122418370773,  410598099935,  383308406428,  143379300071,  381538459468,
      958605626738,  673252298315,  105143149347,  124460261502,  1061549135064,
      574926478160,  1007940563446, 47859509316,   210602149718,  208571993739,
      485179006923,  74897575973,   95298870620,   167108093953,  714377574547,
      761914996397,  119970830802,  25252765143,   513221792158,  285127058618,
      712692167215,  77505316596,   249624728959,  336068645683,  350174453771,
      639630057978,  29011570656,   290964611147,  537089894754,  927719572835,
      1045383821139, 885481115946,  207027039670,  66096322650,   250945772921,
      312019760068,  945989445120,  787856158199,  242114387901,  665715377927,
      408421945010,  1051985645842, 137160694193,  265744368176,  611356259364,
      920644910921,  34875920797,   917683701026,  561122166963,  308972109564,
      903914568135,  210970181105,  594288492738,  210729566212,  440057238166,
      486859033597,  632923387537,  159988946118,  628317760165,  886294588926,
      802961117540,  230578884202,  540428043537,  471465541024,  461615521439,
      581798461835,  658244456119,  197089200674,  948466358474,  1048000113271,
      961593786762,  61877294310,   609103074077,  634900215114,  581219006687,
      624966854033,  413826302996,  504539176612,  992197944316,  544226172176,
      1082468339416, 1033397819358, 1023756556684, 932052739930,  1005857504912,
      283510096225,  771348747878,  144367850733,  121002480493,  103902761760,
      419451029320,  708473276585,  523857205271,  1020705781032, 385482410057,
      753061534442,  709462557202,  1044288323236, 37061658966,   252697977988,
      756587456909,  897875367010,  192937123541,  189249897995,  642718222069,
      151882783357,  820653712660,  1091249993359, 448051943411,  1052312997780,
      111391828202,  639423158972,  832990235352,  191328391115,  702433571250,
      562371344193,  881991628846,  191669982255,  62493973081,   999222950263,
      862817358966,  285173194669,  798810986556,  828861691273,  728915915825,
      130338718806,  1035471840771, 1084657307574, 672514650011,  1083674743249,
      770975871239,  946787317323,  175401414421,  263941418358,  2921782672,
      1044478032771, 850149580485,  601137692629,  615760376478,  92064331321,
      497142651303,  1062022467560, 1095863327472, 68919098748,   346760894816,
      891100235032,  538058563154,  1682061157,    475119703319,  266330942983,
      336102161677,  691019148852,  29894265161,   612644404891,  372090896005,
      825909684897,  189006096489,  555003795406,  710464678040,  1010965167136,
      781276277348,  708589222615,  1001307633404, 311940615278,  487244728723,
      185756389395,  107208375236,  366238147948,  1080662218329, 625302377637,
      338105994431,  397676162328,  541925832119,  742722590928,  281627156431,
      131739970607,  723370968539,  345590655439,  91419942851,   254372290073,
      519191323341,  15527864119,   878005554243,  750197525309,  937722491581,
      532888578365,  868960619690,  753359761104,  747010878497,  1076220094916,
      958875161015,  94774637393,   340730569669,  283329920768,  642020836084,
      151709951513,  110952319271,  902161539315,  375179612519,  206541833551,
      721751448228,  385186232267,  756510970461,  227446333033,  1087438029932,
      630731291486,  1091830532036, 1007480323812, 44698026046,   281790158807,
      919868875429,  541385120569,  952509273933,  333725039363,  428036448522,
      334036092184,  883453374503,  369226500939,  1032899375205, 1014028344681,
      294274638355,  1084477239049, 364083942965,  417514232972,  614346448735,
      180307700216,  707902763179,  469029232964,  1068109342799, 142458069324,
      500015439780,  516989599924,  566342962776,  171215755857,  801469165613,
      708407922670,  1089878926303, 1021271720516, 662396656991,  920559436609};

  zeros = std::vector<uint64_t>{zeros.begin(), zeros.begin() + num_vals};
  xs = std::vector<uint64_t>{xs.begin(), xs.begin() + num_vals};
  xc = std::vector<uint64_t>{xc.begin(), xc.begin() + num_vals};
  r = std::vector<uint64_t>{r.begin(), r.begin() + num_vals};

  // Server function
  auto server_fun = [&]() {
    NGRAPH_INFO << "server function";
    auto server = std::make_unique<ABYParty>(
        SERVER, "0.0.0.0", 30001, get_sec_lvl(128), 64, 1, MT_OT, 100);

    std::vector<Sharing*>& sharings = server->GetSharings();
    BooleanCircuit& circ = dynamic_cast<BooleanCircuit&>(
        *sharings[sharing]->GetCircuitBuildRoutine());

    std::this_thread::sleep_for(std::chrono::seconds(1));

    ngraph::runtime::aby::relu_aby(circ, num_vals, xs, zeros, r, bitlen,
                                   coeff_modulus);
    server->ExecCircuit();
    server->Reset();
  };

  // Client function
  auto client_fun = [&]() {
    std::this_thread::sleep_for(std::chrono::seconds(1));
    NGRAPH_INFO << "client function";
    auto client = std::make_unique<ABYParty>(
        CLIENT, "localhost", 30001, get_sec_lvl(128), 64, 1, MT_OT, 100000);

    std::vector<Sharing*>& sharings = client->GetSharings();
    BooleanCircuit& circ = dynamic_cast<BooleanCircuit&>(
        *sharings[sharing]->GetCircuitBuildRoutine());

    share* relu_out = ngraph::runtime::aby::relu_aby(
        circ, num_vals, zeros, xc, zeros, bitlen, coeff_modulus);

    client->ExecCircuit();

    uint32_t out_bitlen_relu, out_num_aby_vals;
    uint64_t* out_vals_relu;

    relu_out->get_clear_value_vec(&out_vals_relu, &out_bitlen_relu,
                                  &out_num_aby_vals);

    for (size_t i = 0; i < out_num_aby_vals; ++i) {
      NGRAPH_INFO << "out_vals_relu[" << i << "[ = " << out_vals_relu[i];
    }

    client->Reset();
  };
  std::thread server_thread(server_fun);
  client_fun();
  server_thread.join();
}

TEST(aby, relu_circuit_debug_10) {
  e_sharing sharing = S_BOOL;
  uint32_t bitlen = 64;
  size_t num_vals = 10;

  size_t coeff_modulus = 1099511592961;

  NGRAPH_INFO << "coeff_modulus " << coeff_modulus;
  NGRAPH_INFO << "num_vals " << num_vals;
  std::vector<uint64_t> zeros(num_vals, 0);

  std::vector<uint64_t> xs(num_vals, 0);
  std::vector<uint64_t> xc{
      26249340717,   1082557063053, 1088092409327, 52588545315,
      23598220947,   1086178503016, 1069306892608, 34583375118,
      28064324190,   1085224137988, 1098615949210, 1092228633962,
      26086962122,   1083549690341, 8605758044,    22388902316,
      29104095369,   1080760988798, 1071707877304, 25964880413,
      1093190087897, 1927619926,    1082411156223, 8242705794,
      1070069931990, 1768175268,    10357795185,   1096052723781,
      1094787396538, 1088076849813, 62932866863,   8461541440,
      7374718618,    25707104982,   1077928406965, 3608106494,
      1061689214947, 6799024803,    1080567097574, 1093737578811,
      7653763843,    17013703210,   1070660672818, 1037806312296,
      1069008955591, 1082264638492, 10535649244,   10636181334,
      1088053374217, 1099038400904, 1093378347253, 1065593613588,
      1056495092504, 10741896853,   1059546438232, 1333669692,
      1070080372649, 20079196001,   2299417868,    1075601699985,
      10005253295,   7204313241,    1064286698470, 1065719887551,
      1069793636843, 1091762690583, 4523706757,    23539533495,
      1082352538471, 1062862258796, 14496578735,   1934826195,
      1097965116935, 1084033916149, 1060305000410, 1059558020742,
      1068472203611, 3456125509,    1098762764576, 1095037632574,
      28448859434,   860020549,     19955252890,   1061566604338,
      1068444782787, 23927397941,   33182555566,   1059558742343,
      46085398301,   28923367208,   2968974604,    11336790985,
      1098068799749, 38428469255,   1053543262065, 44461768149,
      1071806302,    1051596887825, 45145365860,   1078078018149,
      1098620450758, 47177117,      1099242029443, 1098670054524,
      1099038634348, 61083556,      800657172,     1098764255696,
      1099181516881, 362311174,     1098936868733, 1099186414303,
      1099485784337, 726433460,     163964752,     1099035928505,
      1098744939618, 1099230659749, 1098454023217, 1099235181028,
      1099399880345, 1099136192718, 729803920,     1098453434802,
      1098594200997, 185910438,     1099131942199, 244039249,
      57097023,      1099441108637, 1099480093800, 1098894199611,
      1099259326494, 1099502375662, 1098799192212, 1098657103061,
      1099298423024, 1099015979137, 1099077910525, 1099010210624,
      1098967013946, 1099150128566, 321863196,     577837476,
      1099243289522, 14998690,      1099364580443, 701322475,
      847183629,     1099048261861, 225301095,     1099411425075,
      46218072,      33390544,      1098916758664, 255188024,
      1099503700368, 69896935,      966296615,     361737878,
      277616533,     1099244250476, 1099277972782, 1098966974099,
      1097904516959, 897109566,     1099365324802, 1099193907316,
      1099065894247, 1099129879224, 1098961600147, 306764773,
      1099136551180, 1099063970352, 90380353,      1098713199568,
      420394292,     218969568,     126907582,     665887937,
      618999014,     1099145850020, 1099504012252, 1098834603815,
      290371389,     1098794189118, 1099144466109, 1099161983278,
      1099209500879, 1097911105921, 1099039698234, 160706787,
      858522125,     1099260902657, 1099297116500, 33742069,
      1098795942510, 1099303292787, 1099270178227, 1099218883994,
      1099460332253, 1099223101424, 1099297452556, 1099403235582,
      167755654,     547809498,     8039427,       322459363,
      181636697,     20284624,      1098730881346, 1099275220463,
      350209469,     299474069,     1099372485442, 34801812,
      1099467706073, 1099324030221, 182484885,     1098943212464,
      1099232228961, 1099305297225, 1099217803291, 1099282551702,
      189724146,     1099332281223, 1099234631243, 225677511,
      85563289,      1099041979022, 155455867,     1098840242217,
      372612625,     453741128,     1099373787209, 101824296,
      1099050293861, 1099453732664, 343738285,     1099347178538,
      1099151466512, 44010228,      1099149504757, 1099282030056,
      1099158111946, 1099440484876, 1099359807158, 260755460,
      1099232556161, 1099070256587, 1099503036935, 1099315244955,
      1099441776721, 1099164607985, 1099439407760, 245714917,
      352978220,     1099437097808, 427513724,     53220858,
      1099446777012, 1099483548063, 19793334,      93677685,
      1099013474803, 92237638,      1099291496676, 1099363663483,
      1099283773070, 1099391165099, 1099298129345, 183575374,
      1099448684423, 1099163757298, 1099253082413, 1098863208772,
      1099241689560, 466983018,     1099366680077, 126445514,
      62939276,      266502929,     1099292236599, 183720716,
      21733821,      256135125,     148873103,     19503595,
      3489294,       1099315024483, 140911969,     1099405790204,
      262610312,     176151532,     1099425233118, 140093121,
      1099255801852, 1099220762372, 415477299,     1099273662605,
      171881811,     1098961231724, 1099393088161, 1098942695223,
      1099397026519, 1099282671002, 190386121,     105042358,
      13578776,      568967054,     1099113125008, 1098867570279,
      137492406,     1099272009247, 1099145362504, 1098675274982,
      1099381179764, 1099038545749, 1099313514545, 1098698947570,
      1099474473013, 1098258065784, 1098987822458, 175560075,
      54170237,      1098919418989, 1099038950048, 436539242,
      1098759228387, 316193340,     1098667246662, 79878289,
      1099361363205, 1098959694543, 1098908619452, 1099282848039,
      1099094491420, 211723,        182982875,     1099126508060,
      136985335,     1099123127928, 1099013627849, 1099429241080,
      616879120,     164153560,     394085562,     255987092,
      899703267,     1098735178918, 390854503,     870358772,
      1099347276874, 1098733668644, 1099431514684, 1099249521031,
      319654480,     1099207261701, 1099372951689, 10294993,
      64091570,      1099346353700, 972462316,     1099258607696,
      1099110176048, 1098857620339, 1098797530173, 1099043045823,
      1099383181679, 376852478,     231198006,     629424555,
      324180948,     17432651,      155780792,     1099285196604,
      1099123792128, 1099270071162, 1099186055136, 108811006,
      39735310,      1099043737475, 9843871,       1099055423991,
      1099409629986, 1098950661530, 172012274,     359177490,
      1098972046316, 1098971200562, 1099018558616, 751986285,
      29830253,      1099310724893, 26663571,      1099341027347,
      455343044,     1098792100422, 1099112301452, 1099154295579};
  std::vector<uint64_t> r{
      16717763478,   428743023310,  241203051223,  159171529165,  179518703900,
      733114765257,  951310003195,  403748295410,  274160048649,  855448283369,
      166881687274,  779282046854,  65718622402,   226887416248,  770351354525,
      179385032575,  556100552371,  296658993351,  909357433375,  71868081237,
      155651014134,  343660358145,  949314965337,  513048340664,  841602589548,
      700654620783,  865645490616,  287496253909,  928275651446,  28603280623,
      920474272704,  611181345870,  989112803485,  45402259734,   934167692478,
      347274116831,  521044734072,  539960736455,  121533258688,  176412379949,
      471331743751,  299802612871,  1047990430021, 97688953131,   901779735324,
      221394204489,  878060614811,  667151382932,  84692552424,   206831932670,
      89222039877,   692706376594,  982105707710,  1016182037364, 947095663171,
      426572361647,  900287848207,  157980161180,  85581286732,   827715126241,
      243001401177,  765595275307,  364428382578,  101496784872,  347934162707,
      260627115454,  49392962770,   622255858874,  140784995494,  398804635356,
      374598934341,  642143592948,  964535709683,  695769580709,  726661846902,
      1035320095622, 411934615263,  452166521082,  178823328873,  445391525141,
      595107272848,  296149070017,  1077701925984, 250391413460,  727909651003,
      791540999150,  159687473287,  144328636539,  223346016951,  440517877495,
      634176304428,  1029077489557, 475427486029,  70699713109,   66690152200,
      832210732364,  545894027746,  263743630119,  44843257751,   982393729269,
      94500109228,   824758131649,  759869528823,  576237949385,  1072969474572,
      345970414021,  235379092512,  763738257161,  680971549756,  885101134782,
      346938550478,  229311466751,  237009805239,  281280347868,  955476756093,
      1005484215770, 837396507852,  319896379541,  211374857424,  755167613103,
      653316595181,  1010288205864, 617256921760,  659820156699,  214699945168,
      55859424522,   530698058918,  1072811558209, 442391069647,  957528834281,
      260474667247,  1020151839119, 1096308485764, 39076097773,   1066925156239,
      273491502848,  539905752250,  863041085660,  247543575288,  471787661150,
      495739977206,  131439139696,  266734268652,  970472315626,  771109472918,
      524480091288,  952143123139,  740523673653,  788873882768,  338486485268,
      245436154694,  1075759586789, 841667500600,  722572109559,  164627564676,
      122418370773,  410598099935,  383308406428,  143379300071,  381538459468,
      958605626738,  673252298315,  105143149347,  124460261502,  1061549135064,
      574926478160,  1007940563446, 47859509316,   210602149718,  208571993739,
      485179006923,  74897575973,   95298870620,   167108093953,  714377574547,
      761914996397,  119970830802,  25252765143,   513221792158,  285127058618,
      712692167215,  77505316596,   249624728959,  336068645683,  350174453771,
      639630057978,  29011570656,   290964611147,  537089894754,  927719572835,
      1045383821139, 885481115946,  207027039670,  66096322650,   250945772921,
      312019760068,  945989445120,  787856158199,  242114387901,  665715377927,
      408421945010,  1051985645842, 137160694193,  265744368176,  611356259364,
      920644910921,  34875920797,   917683701026,  561122166963,  308972109564,
      903914568135,  210970181105,  594288492738,  210729566212,  440057238166,
      486859033597,  632923387537,  159988946118,  628317760165,  886294588926,
      802961117540,  230578884202,  540428043537,  471465541024,  461615521439,
      581798461835,  658244456119,  197089200674,  948466358474,  1048000113271,
      961593786762,  61877294310,   609103074077,  634900215114,  581219006687,
      624966854033,  413826302996,  504539176612,  992197944316,  544226172176,
      1082468339416, 1033397819358, 1023756556684, 932052739930,  1005857504912,
      283510096225,  771348747878,  144367850733,  121002480493,  103902761760,
      419451029320,  708473276585,  523857205271,  1020705781032, 385482410057,
      753061534442,  709462557202,  1044288323236, 37061658966,   252697977988,
      756587456909,  897875367010,  192937123541,  189249897995,  642718222069,
      151882783357,  820653712660,  1091249993359, 448051943411,  1052312997780,
      111391828202,  639423158972,  832990235352,  191328391115,  702433571250,
      562371344193,  881991628846,  191669982255,  62493973081,   999222950263,
      862817358966,  285173194669,  798810986556,  828861691273,  728915915825,
      130338718806,  1035471840771, 1084657307574, 672514650011,  1083674743249,
      770975871239,  946787317323,  175401414421,  263941418358,  2921782672,
      1044478032771, 850149580485,  601137692629,  615760376478,  92064331321,
      497142651303,  1062022467560, 1095863327472, 68919098748,   346760894816,
      891100235032,  538058563154,  1682061157,    475119703319,  266330942983,
      336102161677,  691019148852,  29894265161,   612644404891,  372090896005,
      825909684897,  189006096489,  555003795406,  710464678040,  1010965167136,
      781276277348,  708589222615,  1001307633404, 311940615278,  487244728723,
      185756389395,  107208375236,  366238147948,  1080662218329, 625302377637,
      338105994431,  397676162328,  541925832119,  742722590928,  281627156431,
      131739970607,  723370968539,  345590655439,  91419942851,   254372290073,
      519191323341,  15527864119,   878005554243,  750197525309,  937722491581,
      532888578365,  868960619690,  753359761104,  747010878497,  1076220094916,
      958875161015,  94774637393,   340730569669,  283329920768,  642020836084,
      151709951513,  110952319271,  902161539315,  375179612519,  206541833551,
      721751448228,  385186232267,  756510970461,  227446333033,  1087438029932,
      630731291486,  1091830532036, 1007480323812, 44698026046,   281790158807,
      919868875429,  541385120569,  952509273933,  333725039363,  428036448522,
      334036092184,  883453374503,  369226500939,  1032899375205, 1014028344681,
      294274638355,  1084477239049, 364083942965,  417514232972,  614346448735,
      180307700216,  707902763179,  469029232964,  1068109342799, 142458069324,
      500015439780,  516989599924,  566342962776,  171215755857,  801469165613,
      708407922670,  1089878926303, 1021271720516, 662396656991,  920559436609};

  size_t offset = 90;

  // xs = std::vector<uint64_t>{xs.begin() + offset,
  //                           xs.begin() + offset + num_vals};
  xc = std::vector<uint64_t>{xc.begin() + offset,
                             xc.begin() + offset + num_vals};
  r = std::vector<uint64_t>{r.begin() + offset, r.begin() + offset + num_vals};

  // Server function
  auto server_fun = [&]() {
    NGRAPH_INFO << "server function";
    auto server = std::make_unique<ABYParty>(
        SERVER, "0.0.0.0", 30001, get_sec_lvl(128), 64, 1, MT_OT, 100);

    std::vector<Sharing*>& sharings = server->GetSharings();
    BooleanCircuit& circ = dynamic_cast<BooleanCircuit&>(
        *sharings[sharing]->GetCircuitBuildRoutine());

    std::this_thread::sleep_for(std::chrono::seconds(1));

    ngraph::runtime::aby::relu_aby(circ, num_vals, xs, zeros, r, bitlen,
                                   coeff_modulus);
    server->ExecCircuit();
    server->Reset();
  };

  // Client function
  auto client_fun = [&]() {
    std::this_thread::sleep_for(std::chrono::seconds(1));
    NGRAPH_INFO << "client function";
    auto client = std::make_unique<ABYParty>(
        CLIENT, "localhost", 30001, get_sec_lvl(128), 64, 1, MT_OT, 100000);

    std::vector<Sharing*>& sharings = client->GetSharings();
    BooleanCircuit& circ = dynamic_cast<BooleanCircuit&>(
        *sharings[sharing]->GetCircuitBuildRoutine());

    share* relu_out = ngraph::runtime::aby::relu_aby(
        circ, num_vals, zeros, xc, zeros, bitlen, coeff_modulus);

    client->ExecCircuit();

    uint32_t out_bitlen_relu, out_num_aby_vals;
    uint64_t* out_vals_relu;

    relu_out->get_clear_value_vec(&out_vals_relu, &out_bitlen_relu,
                                  &out_num_aby_vals);

    for (size_t i = 0; i < out_num_aby_vals; ++i) {
      NGRAPH_INFO << "out_vals_relu[" << i << "[ = " << out_vals_relu[i];
    }

    client->Reset();
  };
  std::thread server_thread(server_fun);
  client_fun();
  server_thread.join();
}
